package com.aptea;

import com.dictao.keynectis.quicksign.transid.RequestTransId;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.Reader;
import java.io.StringWriter;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import javax.ejb.Stateless;
import org.bouncycastle.util.encoders.Base64;
import irsn.CommonMapping;
import irsn.Settings;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;

/**
 * User: gregory.anne
 */
@Stateless(name = "CallKeynectisService")
public class CallKeynectisServiceImpl implements ICallKeynectisServiceRemote {

     private void pdf2xml(byte[] fileArray, String pdfFileName) throws IOException {
        if (fileArray != null) {
            try {
                byte[] beginTag = new String(
                        "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<docPDFb64>\n").getBytes();
                byte[] endTag = new String("\n</docPDFb64>").getBytes();
                FileOutputStream os = new FileOutputStream(pdfFileName + ".xml");

                os.write(beginTag);
                os.write(Base64.encode(fileArray));
                os.write(endTag);
                os.flush();
                os.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
     
    @Override
    public String digitalSignature() throws Exception {
            byte[] content = null;
            String pdfFileName = "updateDfss.pdf";

	    URL url = this.getClass().getClassLoader().getResource("example/"+pdfFileName);
	    ByteArrayOutputStream bais = new ByteArrayOutputStream();
	    InputStream is = null;
	    try {
	      is = url.openStream ();
	      byte[] byteChunk = new byte[4096]; // Or whatever size you want to read in at a time.
	      int n;

	      while ( (n = is.read(byteChunk)) > 0 ) {
		bais.write(byteChunk, 0, n);
	      }
	    }
	    catch (IOException e) {
	      System.err.printf ("Failed while reading bytes from %s: %s", url.toExternalForm(), e.getMessage());
	      e.printStackTrace ();
	      // Perform any other exception handling that's appropriate.
	    }
	    finally {
	      if (is != null) { is.close(); }
	    }
	    
	    
	    content = bais.toByteArray();

            //si nouvelle signature, on enregistre un duplicata avec la nouvelle signature
            RequestTransId rti = new RequestTransId(Settings.DIGITAL_SIGNATURE_ID_APPLICATION.getSetting(),
                    Settings.DIGITAL_SIGNATURE_ID_APPLICATION_SERVER.getSetting(),
                    Settings.DIGITAL_SIGNATURE_ID_ORGANISME.getSetting());
            rti.setBlob(content);
            rti.setName("Test Name");

            //InputStream in = this.getClass().getClassLoader().getResourceAsStream("Keynectis/demoqs_i.jks");
            Reader reader = new InputStreamReader(this.getClass().getClassLoader().getResourceAsStream("Keynectis/demoqs-i.p12"), "UTF-8");
            StringWriter outSW = new StringWriter();
            int b;
            while ((b = reader.read()) != -1) {
                outSW.write(b);
            }
            outSW.flush();
            outSW.close();
            rti.setCipherCertFilePath(outSW.toString());
            /*
             in = this.getClass().getClassLoader().getResourceAsStream("Keynectis/demoqs_i.p12");
             outSW = new StringWriter();
             try {
             while ((b = in.read()) != -1) {
             outSW.write(b);
             }
             outSW.flush();
             outSW.close();
             } catch (IOException ex) {
             logger.error("IO error");
             }
             rti.setSignCertFilePath(outSW.toString());
             */
            rti.setAuthority(Settings.DIGITAL_SIGNATURE_AUTHORITY.getSetting());
            rti.setCuf("1234");
            //TODO : switch to FO only
            rti.setReturnUrl(Settings.PUBLIC_URL_BO.getSetting() + CommonMapping.MAPPING_TRANS_ID_REPLY);

	    rti.setEmail("apteagrouptest@gmail.com");

            String tag = "DATA_METIER=formulaire\n"
                    + "CUF_ORG=no\n"
                    + "TYPE=38\n"
                    + "VISU=docPDFb64\n"
                    //tag += "PDF_VERIFY_FIELDS=Signature1\n";
                    //tag += "PDF_SIGN_FIELD=Signature2\n";
                    //+ "PDF_SIGN_FIELD=Signature2\n"
                    + "PDF_SIGNATURE_LAYER2_TEXT=Signé électroniquement par : #PDF_SIGNER_IDENTITY#\n"
                    + "PDF_SIGNATURE_BACKGROUND_IMAGE=\n"
                    + "PDF_SIGNATURE_BACKGROUND_IMAGE_SCALE=-1\n"
                    + "EXTRA_PARAM=demo=demoPDFSMS;numTelSMS=0651107979;smsBody=Bonjour. Voici votre code de signature : " + rti.getCuf() + ". " + " Keynectis vous remercie de votre confiance.\n";

            rti.setTag(tag);

           rti.setTransNum("123456789");//test trans num

            pdf2xml(content, pdfFileName);
            URL pathXmlFileDsig = this.getClass().getClassLoader().getResource("Keynectis/demoqs-s.p12");

            /*
             Caused by: java.io.IOException: Invalid keystore format
             at sun.security.provider.JavaKeyStore.engineLoad(JavaKeyStore.java:650)
             at sun.security.provider.JavaKeyStore$JKS.engineLoad(JavaKeyStore.java:55)
             at java.security.KeyStore.load(KeyStore.java:1214)
             at com.dictao.keynectis.quicksign.transid.Util.loadKeystore(Util.java:526)
             at com.dictao.keynectis.quicksign.transid.Util.signXmlFileDsig(Util.java:96)
             * */
            //String origMetierSign = com.dictao.keynectis.quicksign.transid.Util.signXmlFileDsig(
            //		pdfFileName + ".xml", pathXmlFileDsig.getPath(), "DemoQS");		
            String origMetierSign = com.dictao.keynectis.quicksign.transid.Util.signXmlFileDsig(
                    pdfFileName + ".xml", pathXmlFileDsig.getPath(), "1234");
            rti.setFilePath(origMetierSign);

            HttpClient httpClient = new DefaultHttpClient();
            HttpPost httpPost = new HttpPost(Settings.DIGITAL_SIGNATURE_SUBMIT_URL.getSetting());
            List<NameValuePair> params = new ArrayList<NameValuePair>();
            params.add(new BasicNameValuePair("appid", Settings.DIGITAL_SIGNATURE_ID_APPLICATION.getSetting()));
            params.add(new BasicNameValuePair("blob", rti.getB64Blob()));
            httpPost.setEntity(new UrlEncodedFormEntity(params, "UTF-8"));

            HttpResponse response = httpClient.execute(httpPost);
            //HttpEntity respEntity = response.getEntity();

            return rti.getTransNum();
    }
    
    public static void main(String [] args) throws Exception{
	new CallKeynectisServiceImpl().digitalSignature();
    }
    
}
